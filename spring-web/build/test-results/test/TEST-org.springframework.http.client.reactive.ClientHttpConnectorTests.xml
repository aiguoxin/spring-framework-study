<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="org.springframework.http.client.reactive.ClientHttpConnectorTests" tests="30" skipped="0" failures="0" errors="0" timestamp="2020-06-22T06:39:35" hostname="aiguoxindeMacBook-Pro.local" time="0.752">
  <properties/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[1]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.176"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[2]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.013"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[3]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.013"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[4]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.012"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[5]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.007"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[6]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.009"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[7]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.009"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[8]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.005"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[9]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.14"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[10]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.008"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[11]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.017"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[12]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.009"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[13]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.009"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[14]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.007"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[15]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.006"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[16]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.007"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[17]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.131"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[18]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.01"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[19]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.013"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[20]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.005"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[21]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.006"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[22]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.006"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[23]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.005"/>
  <testcase name="basic(ClientHttpConnector, HttpMethod)[24]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.009"/>
  <testcase name="cancelResponseBody(ClientHttpConnector)[1]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.031"/>
  <testcase name="cancelResponseBody(ClientHttpConnector)[2]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.015"/>
  <testcase name="cancelResponseBody(ClientHttpConnector)[3]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.007"/>
  <testcase name="errorInRequestBody(ClientHttpConnector)[1]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.02"/>
  <testcase name="errorInRequestBody(ClientHttpConnector)[2]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.01"/>
  <testcase name="errorInRequestBody(ClientHttpConnector)[3]" classname="org.springframework.http.client.reactive.ClientHttpConnectorTests" time="0.005"/>
  <system-out><![CDATA[14:39:35.624 [reactor-http-nio-3] ERROR i.n.u.ResourceLeakDetector - LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:285)
	io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	java.lang.Thread.run(Thread.java:745)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.forEachByte(AdvancedLeakAwareByteBuf.java:670)
	io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser.parse(HttpObjectDecoder.java:872)
	io.netty.handler.codec.http.HttpObjectDecoder.readHeaders(HttpObjectDecoder.java:572)
	io.netty.handler.codec.http.HttpObjectDecoder.decode(HttpObjectDecoder.java:214)
	io.netty.handler.codec.http.HttpClientCodec$Decoder.decode(HttpClientCodec.java:202)
	io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:501)
	io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:440)
	io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276)
	io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	java.lang.Thread.run(Thread.java:745)
#3:
	Hint: 'HttpClientCodec#0' will handle the message from this point.
	io.netty.channel.DefaultChannelPipeline.touch(DefaultChannelPipeline.java:116)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	java.lang.Thread.run(Thread.java:745)
#4:
	Hint: 'DefaultChannelPipeline$HeadContext#0' will handle the message from this point.
	io.netty.channel.DefaultChannelPipeline.touch(DefaultChannelPipeline.java:116)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	java.lang.Thread.run(Thread.java:745)
#5:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeBytes(AdvancedLeakAwareByteBuf.java:634)
	io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:350)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:148)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	java.lang.Thread.run(Thread.java:745)
Created at:
	io.netty.buffer.PooledByteBufAllocator.newDirectBuffer(PooledByteBufAllocator.java:363)
	io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:187)
	io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:178)
	io.netty.buffer.AbstractByteBufAllocator.ioBuffer(AbstractByteBufAllocator.java:139)
	io.netty.channel.DefaultMaxMessagesRecvByteBufAllocator$MaxMessageHandle.allocate(DefaultMaxMessagesRecvByteBufAllocator.java:114)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:147)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	java.lang.Thread.run(Thread.java:745)
: 5 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit.
14:39:35.630 [reactor-http-nio-3] ERROR i.n.u.ResourceLeakDetector - LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.handler.codec.http.DefaultHttpContent.release(DefaultHttpContent.java:92)
	io.netty.util.ReferenceCountUtil.release(ReferenceCountUtil.java:88)
	io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:90)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)
	io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:296)
	io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	java.lang.Thread.run(Thread.java:745)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.order(AdvancedLeakAwareByteBuf.java:70)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:341)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:280)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:534)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	io.netty.handler.codec.MessageAggregator.appendPartialContent(MessageAggregator.java:333)
	io.netty.handler.codec.MessageAggregator.decode(MessageAggregator.java:298)
	io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:88)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)
	io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:296)
	io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	java.lang.Thread.run(Thread.java:745)
#3:
	io.netty.handler.codec.MessageAggregator.appendPartialContent(MessageAggregator.java:333)
	io.netty.handler.codec.MessageAggregator.decode(MessageAggregator.java:298)
	io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:88)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)
	io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:296)
	io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	java.lang.Thread.run(Thread.java:745)
#4:
	Hint: 'HttpObjectAggregator#0' will handle the message from this point.
	io.netty.handler.codec.http.DefaultHttpContent.touch(DefaultHttpContent.java:86)
	io.netty.handler.codec.http.DefaultLastHttpContent.touch(DefaultLastHttpContent.java:88)
	io.netty.handler.codec.http.DefaultLastHttpContent.touch(DefaultLastHttpContent.java:28)
	io.netty.channel.DefaultChannelPipeline.touch(DefaultChannelPipeline.java:116)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)
	io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:296)
	io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	java.lang.Thread.run(Thread.java:745)
Created at:
	io.netty.buffer.SimpleLeakAwareByteBuf.unwrappedDerived(SimpleLeakAwareByteBuf.java:143)
	io.netty.buffer.SimpleLeakAwareByteBuf.readRetainedSlice(SimpleLeakAwareByteBuf.java:67)
	io.netty.buffer.AdvancedLeakAwareByteBuf.readRetainedSlice(AdvancedLeakAwareByteBuf.java:107)
	io.netty.handler.codec.http.HttpObjectDecoder.decode(HttpObjectDecoder.java:292)
	io.netty.handler.codec.http.HttpClientCodec$Decoder.decode(HttpClientCodec.java:202)
	io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:501)
	io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:440)
	io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276)
	io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	java.lang.Thread.run(Thread.java:745)
14:39:35.636 [reactor-http-nio-3] ERROR i.n.u.ResourceLeakDetector - LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage.release(HttpObjectAggregator.java:379)
	io.netty.util.ReferenceCountUtil.release(ReferenceCountUtil.java:88)
	io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:106)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)
	io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:296)
	io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	java.lang.Thread.run(Thread.java:745)
#2:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.retain(AdvancedLeakAwareCompositeByteBuf.java:36)
	io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage.retain(HttpObjectAggregator.java:355)
	io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse.retain(HttpObjectAggregator.java:554)
	org.springframework.http.client.Netty4ClientHttpResponse.<init>(Netty4ClientHttpResponse.java:58)
	org.springframework.http.client.Netty4ClientHttpRequest$RequestExecuteHandler.channelRead0(Netty4ClientHttpRequest.java:178)
	org.springframework.http.client.Netty4ClientHttpRequest$RequestExecuteHandler.channelRead0(Netty4ClientHttpRequest.java:168)
	io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)
	io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:296)
	io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	java.lang.Thread.run(Thread.java:745)
#3:
	Hint: 'Netty4ClientHttpRequest$RequestExecuteHandler#0' will handle the message from this point.
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.touch(AdvancedLeakAwareCompositeByteBuf.java:36)
	io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage.touch(HttpObjectAggregator.java:367)
	io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse.touch(HttpObjectAggregator.java:560)
	io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse.touch(HttpObjectAggregator.java:494)
	io.netty.channel.DefaultChannelPipeline.touch(DefaultChannelPipeline.java:116)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)
	io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:296)
	io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	java.lang.Thread.run(Thread.java:745)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:920)
	io.netty.handler.codec.MessageAggregator.appendPartialContent(MessageAggregator.java:333)
	io.netty.handler.codec.MessageAggregator.decode(MessageAggregator.java:298)
	io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:88)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)
	io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:296)
	io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	java.lang.Thread.run(Thread.java:745)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:223)
	io.netty.buffer.AbstractByteBufAllocator.compositeBuffer(AbstractByteBufAllocator.java:201)
	io.netty.handler.codec.MessageAggregator.decode(MessageAggregator.java:271)
	io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:88)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)
	io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:311)
	io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:425)
	io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276)
	io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	java.lang.Thread.run(Thread.java:745)
]]></system-out>
  <system-err><![CDATA[六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63147] starting to accept connections
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63147] received request: GET / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63147] done accepting connections: Socket closed
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63149] starting to accept connections
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63149] received request: HEAD / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63149] done accepting connections: Socket closed
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63151] starting to accept connections
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63151] received request: POST / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63151] done accepting connections: Socket closed
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63153] starting to accept connections
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63153] received request: PUT / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63153] done accepting connections: Socket closed
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63155] starting to accept connections
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63155] received request: PATCH / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63155] done accepting connections: Socket closed
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63157] starting to accept connections
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63157] received request: DELETE / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63157] done accepting connections: Socket closed
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63159] starting to accept connections
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63159] received request: OPTIONS / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63159] done accepting connections: Socket closed
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63161] starting to accept connections
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63161] received request: TRACE / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63161] done accepting connections: Socket closed
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63163] starting to accept connections
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63163] received request: GET / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63163] done accepting connections: Socket closed
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63165] starting to accept connections
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63165] received request: HEAD / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63165] done accepting connections: Socket closed
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63167] starting to accept connections
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63167] received request: POST / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63167] done accepting connections: Socket closed
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63169] starting to accept connections
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63169] received request: PUT / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63169] done accepting connections: Socket closed
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63171] starting to accept connections
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63171] received request: PATCH / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63171] done accepting connections: Socket closed
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63173] starting to accept connections
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63173] received request: DELETE / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63173] done accepting connections: Socket closed
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63175] starting to accept connections
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63175] received request: OPTIONS / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63175] done accepting connections: Socket closed
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63177] starting to accept connections
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63177] received request: TRACE / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63177] done accepting connections: Socket closed
六月 22, 2020 2:39:35 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63179] starting to accept connections
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63179] received request: GET / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63179] done accepting connections: Socket closed
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63181] starting to accept connections
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63181] received request: HEAD / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63181] done accepting connections: Socket closed
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63183] starting to accept connections
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63183] received request: POST / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63183] done accepting connections: Socket closed
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63185] starting to accept connections
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63185] received request: PUT / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63185] done accepting connections: Socket closed
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63187] starting to accept connections
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63187] received request: PATCH / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63187] done accepting connections: Socket closed
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63189] starting to accept connections
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63189] received request: DELETE / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63189] done accepting connections: Socket closed
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63191] starting to accept connections
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63191] received request: OPTIONS / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63191] done accepting connections: Socket closed
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63193] starting to accept connections
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63193] received request: TRACE / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63193] done accepting connections: Socket closed
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63195] starting to accept connections
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63195] received request: POST / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63195] done accepting connections: Socket closed
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63197] starting to accept connections
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63197] received request: POST / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63197] done accepting connections: Socket closed
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63199] starting to accept connections
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$4 processOneRequest
信息: MockWebServer[63199] received request: POST / HTTP/1.1 and responded: HTTP/1.1 200 OK
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63199] done accepting connections: Socket closed
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63201] starting to accept connections
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$4 execute
信息: MockWebServer[63201] connection from /127.0.0.1 failed: java.io.EOFException: \n not found: limit=0 content=…
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63201] done accepting connections: Socket closed
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63203] starting to accept connections
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63203] done accepting connections: Socket closed
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 execute
信息: MockWebServer[63204] starting to accept connections
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$4 processConnection
警告: MockWebServer[63204] connection from /127.0.0.1 didn't make a request
六月 22, 2020 2:39:36 下午 okhttp3.mockwebserver.MockWebServer$3 acceptConnections
信息: MockWebServer[63204] done accepting connections: Socket closed
]]></system-err>
</testsuite>
